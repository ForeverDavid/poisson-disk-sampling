name: CI

on: [push, pull_request]

jobs:
  ci:
    name: ${{ matrix.name }}
    runs-on: ${{ matrix.os }}

    env:
      CMAKE_GENERATOR: Ninja  
      VERBOSE: ON #-DCMAKE_VERBOSE_MAKEFILE
      CTEST_OUTPUT_ON_FAILURE: ON
      CTEST_PARALLEL_LEVEL: 2

    strategy:
      fail-fast: false
      matrix:
        # Github Actions requires a single row to be added to the build matrix.
        # See https://help.github.com/en/articles/workflow-syntax-for-github-actions.
        name: [
          ubuntu-18.04-gcc-9-cxx-14,
          ubuntu-18.04-gcc-9-cxx-17,
          macOS-10.15-xcode-cxx-14,
          macOS-10.15-xcode-cxx-17,
          windows-2019-cl-cxx-14,
          windows-2019-cl-cxx-17
        ]
        include:
          - name: ubuntu-18.04-gcc-9-cxx-14
            os: ubuntu-18.04
            compiler: gcc
            version: "9"
            cxx_std: 14
          - name: ubuntu-18.04-gcc-9-cxx-17
            os: ubuntu-18.04
            compiler: gcc
            version: "9"
            cxx_std: 17
          - name: macOS-10.15-xcode-cxx-14
            os: macOS-10.15
            compiler: xcode
            cxx_std: 14
          - name: macOS-10.15-xcode-cxx-17
            os: macOS-10.15
            compiler: xcode
            cxx_std: 17
          - name: windows-2019-cl-cxx-14
            os: windows-latest
            compiler: cl    
            cxx_std: 14
          - name: windows-2019-cl-cxx-17
            os: windows-latest
            compiler: cl    
            cxx_std: 17

    steps:
      - uses: actions/checkout@v1
      - name: Submodules
        run: git submodule update --init --recursive      
      - name: Install (Linux)
        if: runner.os == 'Linux'
        run: |
          # CMake 3.15 allows specifying the generator using the CMAKE_GENERATOR
          # environment variable.
          curl -sSL https://github.com/Kitware/CMake/releases/download/v3.15.4/cmake-3.15.4-Linux-x86_64.tar.gz -o cmake.tar.gz
          sudo tar xf cmake.tar.gz --strip 1 -C /usr/local

          sudo apt-get update
          sudo apt-get install -y ninja-build

          #if [ "${{ matrix.compiler }}" = "gcc" ]; then
            sudo apt-get install -y g++-${{ matrix.version }}
            echo "::set-env name=CC::gcc-${{ matrix.version }}"
            echo "::set-env name=CXX::g++-${{ matrix.version }}"          
          #else
          #  sudo apt-get install -y clang-${{ matrix.version }} 
          #  echo "::set-env name=CC::clang-${{ matrix.version }}"
          #  echo "::set-env name=CXX::clang++-${{ matrix.version }}"          
          #fi

      - name: Install (macOS)
        if: runner.os == 'macOS'
        run: |
          brew install cmake ninja
          #if [ "${{ matrix.compiler }}" = "gcc" ]; then
          #  brew install gcc@${{ matrix.version }}
          #  echo "::set-env name=CC::gcc-${{ matrix.version }}"
          #  echo "::set-env name=CXX::g++-${{ matrix.version }}"
          #else
            #sudo xcode-select -switch /Applications/Xcode_${{ matrix.version }}.app
            echo "::set-env name=CC::clang"
            echo "::set-env name=CXX::clang++"
          #fi    

      - name: Install (Windows)
        if: runner.os == 'Windows'
        shell: powershell
        run: |
          Invoke-Expression (New-Object System.Net.WebClient).DownloadString('https://get.scoop.sh')
          scoop install ninja --global
          #if ("${{ matrix.compiler }}".StartsWith("clang")) {
          #  scoop install llvm --global
          #}
          #if ("${{ matrix.compiler }}" -eq "gcc") {
            # Chocolatey GCC is broken on the windows-2019 image.
            # See: https://github.com/DaanDeMeyer/doctest/runs/231595515
            # See: https://github.community/t5/GitHub-Actions/Something-is-wrong-with-the-chocolatey-installed-version-of-gcc/td-p/32413
          #  scoop install gcc --global
          #  echo "::set-env name=CC::gcc"
          #  echo "::set-env name=CXX::g++"
          #} elseif ("${{ matrix.compiler }}" -eq "clang") {
          #  echo "::set-env name=CC::clang"
          #  echo "::set-env name=CXX::clang++"
          #} else {
            echo "::set-env name=CC::${{ matrix.compiler }}"
            echo "::set-env name=CXX::${{ matrix.compiler }}"
          #}
          # Scoop modifies the PATH so we make the modified PATH global.
          echo "::set-env name=PATH::$env:PATH"    

      - name: Configure x64
        if: runner.os == 'Windows'
        run: .github\workflows\vsenv.bat -arch=x64 -host_arch=x64      

      - name: Build & Test Debug x64
        run: |
          cmake -E remove_directory build
          #cmake -B build -S . -DTHINKS_RUN_TESTS=ON -DCMAKE_BUILD_TYPE=Debug -DCMAKE_CXX_STANDARD=${{ matrix.cxx_std }} -DCMAKE_VERBOSE_MAKEFILE=ON
          cmake -B build -S . -DTHINKS_RUN_TESTS=ON -DCMAKE_BUILD_TYPE=Debug -DCMAKE_CXX_STANDARD=${{ matrix.cxx_std }} 
          cmake --build build
          cd build 
          ctest --verbose
          #ctest -j2 --output-on-failure --verbose

      - name: Build & Test Release x64
        run: |
          cmake -E remove_directory build
          #cmake -B build -S . -DTHINKS_RUN_TESTS=ON -DCMAKE_BUILD_TYPE=Release -DCMAKE_CXX_STANDARD=${{ matrix.cxx_std }} -DCMAKE_VERBOSE_MAKEFILE=ON
          cmake -B build -S . -DTHINKS_RUN_TESTS=ON -DCMAKE_BUILD_TYPE=Release -DCMAKE_CXX_STANDARD=${{ matrix.cxx_std }}
          cmake --build build
          cd build 
          ctest --verbose
          #ctest -j2 --output-on-failure --verbose